# -*- coding: utf-8 -*-
"""
Created on Tue Aug  8 13:35:54 2023

@author: Amar Doshi
"""

'''
The Problem
-----------
We’re given a collection of snowflakes, and we have to determine whether
any of the snowflakes in the collection are identical.
A snowflake is represented by six integers, where each integer gives the
length of one of the snowflake’s arms. For example, this is a snowflake:
3, 9, 15, 2, 1, 10

Snowflakes can also have repeated integers, such as
8, 4, 8, 9, 2, 8

Input
The first line of input is an integer n, which gives the number of snowflakes
that we’ll be processing. The value n will be between 1 and 100,000. Each
of the following n lines represents one snowflake: each line has six integers,
where each integer is at least zero and at most 10,000,000.

Output
Our output will be a single line of text:
• If there are no identical snowflakes, print exactly
No two snowflakes are alike.
• If there are at least two identical snowflakes, print exactly
Twin snowflakes found.

The time limit for solving the test cases is two seconds.

- This is DMOJ problem cco07p2.
'''


def snowFlakes(data: list[list]) -> None:
    n = len(sfs)

    s = sorted([[sum(i), i] for i in sfs], key=lambda i: i[0])

    for i in range(n - 1):
        if not isinstance(s[i][1], str):
            s[i][1] = ' '.join(str(j) for j in s[i][1])

        a = s[i][1]
        b = f'{a} {a}'
        r = a[::-1]
        c = f'{r} {r}'

        j = i + 1

        while j < n and s[j][0] == s[i][0]:
            if not isinstance(s[j][1], str):
                s[j][1] = ' '.join(str(k) for k in s[j][1])

            t = s[j][1]

            if (t == a) or (t in b) or (t in c):
                return 'Twin snowflakes found.'

            j += 1

    return 'No two snowflakes are alike.'


if __name__ == '__main__':

    from random import randint

    n = 100_000

    sfs = [[randint(0, 10_000_000) for i in range(6)] for _ in range(n)]

    print()
    print(snowFlakes(sfs))
